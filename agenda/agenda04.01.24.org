* Start reading on Page 42
** Shaders
*** Gist is, we have a vertex shader and a fragment shader
**** Vertex shader needs to get vertex data, for which there can be "n" instances of it
**** Need to specify what type of data comes in per vertex, as an "in" variable
**** Need to specify extra output (besides gl_position) from the vertex shader into the fragment shader, as "out" variables
*** Need to know basic types, vec3, and what swizziling is, and how vec3 constructors work
*** Uniforms are variable that we pass in that are constant across all "n" invocations of the shader programs
**** No need to copy that data "n" times, if all "n" instances can just access one copy
**** A good example of this in modelviewperspectiveprojection is the notion of time.  It's the same for every instance.
****  demo 1.getting_started/3.1.shaders_uniform shows setting the color as a uniform
**** 1.getting_started/3.2.shaders_interpolation shows put the color in the VBOs, and blending of color
***** Discuss fragment interpolation
*** "Our own shader class"
**** The author makes their own wrapper class for shaders
***** I don't plan on spending much time on it, just know that the author did that
** Chapter 7, Textures
*** Used to add realism without having to add tons of vertex data
**** Map an image to the vertices, and display the color of that image, interpoled correctly
**** Then in the fragment shader, selecting a color is called "sampling"
*** Texture wrapping deals with texture coordinates outside of [0,1]
*** Texture filtering
**** For an image editing application, say Gimp, when you open an image, there is a one-to-one
correspondance between a texture element (texel) and the pixel.  For programs like gimp,
if you want to zoom in, it does by multiples of 2.  That way, one texel will map to 2x2 grid
of pixels, or 4x4, 8x8 and so on
**** We don't have that luxury in graphics programming, gl_positions from the output of the vertex
shader will likely not map one-to-one to the texels.  Therefore, we need to choose how the fragment
shader should pull color data out of the texture.  Know the various types

**** Mipmaps
***** Bill, run the Craft demo to show
***** Sampling from far away from an object, can produce weird effects when the texture has say
1000 color values in it, but the current object being drawn only takes up say 9 fragments.
The values jump around a lot, making things look weird.  mipmaps allow the programmer
to take a given texture, and make mulitple versions of it, with lower resolution to be used
when the camera is farther away.
**** Loading and creating textures
This is necessary work, but not all that interesting to spend too much time on
**** Applying textures
We now pass vertex position, color, and texture coordinates into the VBO, so we need to
configure the VAO to pull them all out, and link them into the start of the vertex shader
**** Bill, run src/1. getting_started/4.1.textures/

We got to about page 60, resuming the rest on Tuesday
